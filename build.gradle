plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {

            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"


        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {

            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.theillusivec4.top/" }

    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }

    maven { url = "https://maven.theillusivec4.top" } // Caelus
    maven {url = "https://code.redspace.io/releases"} // Iron's Spells and Spellbooks
    maven {url = 'https://maven.kosmx.dev/'} // PlayerAnimator
    maven { url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" } // Geckolib
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // KUBEJS
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

    // CURIOS API
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    // GAME STAGES
    runtimeOnly fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-${bookshelf_version}")
    runtimeOnly(fg.deobf("curse.maven:game-stages-268655:${gamestages_version}"))
    compileOnly(fg.deobf("curse.maven:game-stages-268655:${gamestages_version}"))

    // NYF'S QUIVERS
    runtimeOnly(fg.deobf("curse.maven:nyfs-quivers-482731:${quivers_version}"))
    compileOnly(fg.deobf("curse.maven:nyfs-quivers-482731:${quivers_version}"))

    // IRON'S SPELLS N SPELLSBOOKS
    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")
    runtimeOnly fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${playeranimator_version}")
    runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}")
    runtimeOnly fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${ironspells_version}")
    compileOnly fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${ironspells_version}")


    // JEI
    runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:${version_jei}")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json"
        ])
    }

    finalizedBy 'reobfJar'
}


publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

mixin {
    add sourceSets.main, 'yhnp.refmap.json'
    config 'yhnp.mixins.json'
}

